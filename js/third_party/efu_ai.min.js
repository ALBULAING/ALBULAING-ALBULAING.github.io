class efuAI {
    // 构造函数，初始化配置
    constructor() {
        this.config = GLOBAL_CONFIG.post_ai;
        this.aiTalkMode = false;
        this.aiPostExplanation = '';
        this.scoGPTIsRunning = false;
    }

    // 初始化函数，判断是否需要生成摘要
    init() {
        if (!document.querySelector(".ai-explanation")) return;
        this.scoGPTIsRunning = false;
        this.aiPostExplanation = PAGE_CONFIG.ai_text ? PAGE_CONFIG.ai_text + "" : false;
        if (!this.aiPostExplanation) {
            this.generate();
        } else {
            this.aiShowAnimation(Promise.resolve(this.aiPostExplanation));
        }
        this.AIEngine();
    }

    // 获取文章标题与内容，去掉链接并限制字符数
    getTitleAndContent() {
        const e = document.getElementById("article-container");
        const t = document.title;
        const n = e.getElementsByTagName("p");
        const i = e.querySelectorAll("h1, h2, h3, h4, h5");
        
        // 获取文章标题与内容，去掉链接并限制字符数
        return (t + " " + Array.from(i).concat(Array.from(n)).map((e => e.innerText.replace(/https?:\/\/[^\s]+/g, ""))).join(" ")).slice(0, 1000);
    }

    // 生成摘要
    async generate() {
        this.aiShowAnimation(this.fetch(document.title, this.getTitleAndContent()));
    }

    // 调用API获取摘要
    async fetch(title, content) {
        try {
            const response = await fetch(this.apiEndpoint, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${this.config.apiKey}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    model: this.config.model,
                    max_tokens: this.config.max_tokens,
                    messages: [
                        { role: "system", content: "为以下内容生成150字左右的摘要。" },
                        { role: "user", content: content }
                    ]
                })
            });

            const data = await response.json();
            if (response.ok) {
                this.aiPostExplanation = data.choices[0].message.content;
                return data.choices[0].message.content;
            } else {
                console.error("请求失败：", data.error.message);
                return data.error.message;
            }
        } catch (error) {
            console.error("请求错误：", error);
            return "请求过程中发生错误。";
        }
    }

    // 显示摘要动画
    aiShowAnimation(promise, showSuggestions = false) {
        const explanationElement = document.querySelector(".ai-explanation");
        const tagElement = document.querySelector(".ai-tag");
        if (!explanationElement || this.scoGPTIsRunning) return;

        this.scoGPTIsRunning = true;
        this.cleanSuggestions();
        tagElement.classList.add("loadingAI");
        explanationElement.style.display = "block";
        explanationElement.innerHTML = '生成中...<span class="blinking-cursor"></span>';

        promise.then(summary => {
            const updateTextAnimation = text => {
                let index = 0;
                const update = () => {
                    if (index < text.length) {
                        explanationElement.innerHTML = text.slice(0, index + 1) + '<span class="blinking-cursor"></span>';
                        index++;
                        requestAnimationFrame(update);
                    } else {
                        explanationElement.innerHTML = text;
                        explanationElement.style.display = "block";
                        this.scoGPTIsRunning = false;
                        tagElement.classList.remove("loadingAI");

                        if (showSuggestions) {
                            this.createSuggestions();
                        }
                    }
                };
                requestAnimationFrame(update);
            };
            updateTextAnimation(summary);
        }).catch(error => {
            console.error("摘要生成失败：", error);
            explanationElement.innerHTML = "摘要生成失败。";
            explanationElement.style.display = "block";
            this.scoGPTIsRunning = false;
            tagElement.classList.remove("loadingAI");
        });
    }

    // AI引擎
    AIEngine() {
        const tagElement = document.querySelector(".ai-tag");
        tagElement && tagElement.addEventListener("click", () => {
            if (!this.scoGPTIsRunning) {
                this.aiTalkMode = true;
                this.aiShowAnimation(Promise.resolve(this.config.talk), true);
            }
        });
    }

    // 清除建议
    cleanSuggestions() {
        const suggestionsElement = document.querySelector(".ai-suggestions");
        if (suggestionsElement) {
            suggestionsElement.innerHTML = "";
        } else {
            console.error("未找到元素 'ai-suggestions'");
        }
    }

    // 创建建议
    createSuggestions() {
        if (this.aiTalkMode) {
            this.cleanSuggestions();
            this.createSuggestionItemWithAction("这篇文章讲了什么？", () => {
                if (this.aiPostExplanation === "") {
                    this.generate();
                } else {
                    this.aiShowAnimation(Promise.resolve(this.aiPostExplanation), true);
                }
            });
            if (this.config.randomPost) {
                this.createSuggestionItemWithAction("带我去看看其他文章", () => toRandomPost());
            }
            this.aiTalkMode = true;
        }
    }

    // 创建建议项
    createSuggestionItemWithAction(text, action) {
        const suggestionsElement = document.querySelector(".ai-suggestions");
        if (!suggestionsElement) {
            console.error("未找到 class 为 'ai-suggestions' 的元素");
            return;
        }
        const suggestionItem = document.createElement("div");
        suggestionItem.classList.add("ai-suggestions-item");
        suggestionItem.textContent = text;
        suggestionItem.addEventListener("click", action);
        suggestionsElement.appendChild(suggestionItem);
    }
}

// 实例化efuAI
const efu_ai = new efuAI;